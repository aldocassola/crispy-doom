name: Continuous Integration

on:
  push:
    branches:
      - "master"
    paths-ignore:
      - "**.md"
  pull_request:
    branches:
      - "master"
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    defaults:
      run:
        shell: ${{ matrix.config.shell }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: Linux GCC
            os: ubuntu-latest
            compiler: gcc
            cxxcompiler: g++
            shell: bash

          - name: macOS Clang
            os: macos-latest
            compiler: clang
            cxxcompiler: clang++
            shell: bash

          - name: MSYS2 UCRT64
            os: windows-latest
            compiler: gcc
            cxxcompiler: g++
            shell: 'msys2 {0}'
            msystem: ucrt64
            msys-env: mingw-w64-ucrt-x86_64

          - name: MSYS2 MINGW32
            os: windows-latest
            compiler: gcc
            cxxcompiler: g++
            shell: 'msys2 {0}'
            msystem: mingw32
            msys-env: mingw-w64-i686

    steps:
      - name: Install pandoc + cmake
        if: runner.os == 'Windows'
        shell: cmd
        run: choco install pandoc cmake ninja

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libsdl2-dev \
            libsdl2-mixer-dev \
            libsdl2-net-dev \
            libpng-dev \
            libsamplerate0-dev \
            libfluidsynth-dev \
            cmake \
            ninja

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install \
            automake \
            dylibbundler \
            sdl2 \
            sdl2_mixer \
            sdl2_net \
            libpng \
            libsamplerate \
            fluid-synth \
            cmake \
            ninja

      - name: Install dependencies (MSYS2)
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.config.msystem }}
          update: false
          path-type: inherit
          install: >-
            autotools
            cmake
            ninja
            zip
            ${{ matrix.config.msys-env }}-gcc
            ${{ matrix.config.msys-env }}-SDL2
            ${{ matrix.config.msys-env }}-SDL2_mixer
            ${{ matrix.config.msys-env }}-SDL2_net
            ${{ matrix.config.msys-env }}-libpng
            ${{ matrix.config.msys-env }}-libsamplerate
            ${{ matrix.config.msys-env }}-fluidsynth

      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure
        env:
          CC: ${{ matrix.config.compiler }}
          CXX: ${{ matrix.config.cxxcompiler }}
        run: |
          cmake -S. -Bbuilds/${{ matrix.config.os }} -GNinja

      - name: Build
        run: cmake --build builds/${{ matrix.config.os }} -- --target all

      - name: Test
        run: |
          PREFIX=`sed -n '/PROGRAM_PREFIX/p' ${PWD}/config.h | cut -d '"' -f 2`
          echo make -j4 -C quickcheck check SOURCE_PORT=$PWD/src/${PREFIX}doom
